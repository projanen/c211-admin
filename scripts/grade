#!/bin/bash

# Distributes grades from CSVs to handin-server files for web access

if [ $# -ne 2 ] && [ $# -ne 3 ]; then
  echo ""
  echo "Distributes grades from CSVs to handin-server files for web access"
  echo
  echo "Usage: grade assignment {'all' OR lab_section_letter OR username}"
  echo
  echo "Example: grade a1 all      <-- transcribes all a1 grades"
  echo "Example: grade a1 D        <-- transcribes only from .../a1/D.csv"
  echo "Example: grade a1 projanen <-- transcribes only projanen's grade"
  echo
  echo "Option: grade a1 projanen -f ;will write to handin even w/o submission"
  echo "    -f, force option is only active for calls on single usernames"
  echo
  exit
fi

assignment=$1
one_username=$2

if [ $# -eq 2 ]
then
    force=false
else
    if [ "$3" == "-f" ]
    then
	force=true
    else
	echo "Bad third parameter, can only be optional -f"
	exit 1
    fi
fi

#if username is one character, interpret as lab section letter
if [ "${#one_username}" == 1 ]
  then
    labs=("$one_username")
    one_username=all      #process all students in this lab
  else
    labs=(A B C D E F G H)  #search all labs for one or all
fi

csvs="/u/c211/spring15/grades/csvs/$assignment"
usernames="/u/c211/spring15/handin-server/$assignment"

#check existence of assignment folder
if [ ! -d "$usernames" ]; then
  echo "$usernames does not exist!  Nothing done"
  exit
fi

#check existence of source folder, also confirms assignment format
if [ ! -d "$csvs" ]; then
  echo "CSV folder ($csvs) does not exist!  Nothing done"
  exit
fi

if [ "$one_username" != all ]; then
  echo "Searching for $one_username..."
fi

foundhim=false

for section in "${labs[@]}"; do
  csv="$csvs/$section.csv"

  echo "Processing $section lab..."

  #check that CSV file exists
  if [ ! -f "$csv" ]; then
    echo "$csv does not exist!  Skipping $section lab.  Continuing..."
    continue
  fi

  cat "$csv" |
    while read username_grade; do
      #trim whitespace from inside and outside of line-string
      username_grade="${username_grade//[[:space:]]/}"

      #username gets everything before the comma
      username="${username_grade%%,*}"
      
      #grade gets everything after the comma
      grade="${username_grade##*,}"

      folder="$usernames/$username"
      
      ##print out what we now know
      #echo "$username in $section got a $grade on $assignment."
      #continue
      
      #only process if found a match or processing ALL students
      if [ "$one_username" == all ] || [ "$one_username" == "$username" ]; then

	# Skip students with Z grade, and report it!
        if [ "$grade" == Z ]; then
          echo "Z grade in $csv"
	  continue
	fi

        # Skip students w/o submission, and report it!
        if [ ! -d "$folder" ]; then
            echo "$username of $section lab didn't submit but has a grade assigned"
	    # if not forced, then skip this person
	    if [ ! "$force" == true ] || [ "$one_username" == all ]
	    then
		continue
	    else
		mkdir "$folder"
	    fi
	fi

	echo "$grade" > "$usernames/$username/grade"

	if [ "$one_username" == "$username" ]; then
          echo "$username" updated
	  exit 211
	  #could not set foundhim because in subshell
	  #could return an exit code because in subshell
	fi
      fi
    done #while

  if [ $? == 211 ]; then
    foundhim=true
    break
  fi

done #for

if [ "$one_username" != all ] && [ "$foundhim" == false ]; then
  echo "$one_username" NOT updated!
fi
